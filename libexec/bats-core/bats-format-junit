#!/usr/bin/env bash
set -euo pipefail

BASE_PATH=.

while [[ "$#" -ne 0 ]]; do
  case "$1" in
    --base-path)
      shift
      # the relative path root to use for reporting filenames
      # this is mainly intended for suite mode, where this will be the suite root folder
      BASE_PATH="$1"
      # use the containing directory when --base-path is a file
      if [[ ! -d "$BASE_PATH" ]]; then
        BASE_PATH="$(dirname "$BASE_PATH")"
      fi
      # get the absolute path
      BASE_PATH="$(cd "$BASE_PATH"; pwd)"
      # ensure the path ends with / to strip that later on
      if [[ "${BASE_PATH}" != *"/" ]]; then
        BASE_PATH="$BASE_PATH/"
      fi
    ;;
  esac
  shift
done

init_suite() {
  suite_test_exec_time=0
  # since we have to print the suite header before its contents but we don't know the contents before the header, 
  # we have to buffer the contents
  _suite_buffer=""
}

_buffer_log=
init_file() {
  file_count=0
  file_failures=0
  file_skipped=0
  file_exec_time=0
  test_exec_time=0
  _buffer=""
  _buffer_log=""
}

host() {
  local hostname="${HOST:-}"
  [[ -z "$hostname" ]] && hostname="${HOSTNAME:-}"
  [[ -z "$hostname" ]] && hostname="$(uname -n)"
  [[ -z "$hostname" ]] && hostname="$(hostname -f)"

  echo "$hostname"
}

# convert $1 (time in milliseconds) to seconds
milliseconds_to_seconds() {
  # we cannot rely on having bc for this calculation
  full_seconds=$(($1 / 1000))
  remaining_milliseconds=$(($1 % 1000))
  if [[ $remaining_milliseconds -eq 0 ]]; then
    printf "%d" "$full_seconds"
  else
    printf "%d.%03d" "$full_seconds" "$remaining_milliseconds"
  fi
}

suite_header() {
  printf "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<testsuites time=\"%s\">\n" "$(milliseconds_to_seconds "${suite_test_exec_time}")"
}

file_header() {
  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S")
  printf "<testsuite name=\"%s\" tests=\"%s\" failures=\"%s\" errors=\"0\" skipped=\"%s\" time=\"%s\" timestamp=\"%s\" hostname=\"%s\">\n" \
                     "$(xml_escape "${class}")" "${file_count}" "${file_failures}" "${file_skipped}" "$(milliseconds_to_seconds "${file_exec_time}")" "${timestamp}" "$(host)"
}

file_footer() {
  printf "</testsuite>\n"
}

suite_footer() {
  printf "</testsuites>\n"
}

pass() {
  if [[ -n "${_buffer_log}" ]]; then
    printf "    <testcase classname=\"%s\" name=\"%s\" time=\"%s\">
      <system-out>%s</system-out>
    </testcase>\n" "$(xml_escape "${class}")" "$(xml_escape "${name}")" "$(milliseconds_to_seconds "${test_exec_time}")" "$(xml_escape "${_buffer_log}")"
  else
    printf "    <testcase classname=\"%s\" name=\"%s\" time=\"%s\"/>\n" "$(xml_escape "${class}")" "$(xml_escape "${name}")" "$(milliseconds_to_seconds "${test_exec_time}")"
  fi
}

xml_escape() {
  output=${1//&/&amp;}
  output=${output//</&lt;}
  output=${output//>/&gt;}
  output=${output//'"'/&quot;}
  output=${output//\'/&#39;}
  local CONTROL_CHAR=$'\033'
  output="${output//$CONTROL_CHAR/&#27;}"
  printf "%s" "$output"
}

fail() {
  printf "    <testcase classname=\"%s\" name=\"%s\" time=\"%s\">
      <failure type=\"failure\">%s</failure>
    </testcase>\n" "$(xml_escape "${class}")" "$(xml_escape "${name}")" "$(milliseconds_to_seconds "${test_exec_time}")" "$(xml_escape "$1")"
}

skip() {
  # shellcheck disable=SC2183
  printf "    <testcase classname=\"%s\" name=\"%s\" time=\"%s\">
        <skipped>%s</skipped>
    </testcase>\n" "$(xml_escape "${class}")" "$(xml_escape "${name}")" "$(milliseconds_to_seconds "${test_exec_time}")" "$(xml_escape "$1")"
}

suite_buffer() {
  local output
  output="$("$@"; printf "x")" # use x marker to avoid losing trailing newlines
  _suite_buffer="${_suite_buffer}${output%x}"
}

suite_flush() {
  echo -n "${_suite_buffer}"
  _suite_buffer=""
}

buffer() {
  local output
  output="$("$@"; printf "x")" # use x marker to avoid losing trailing newlines
  _buffer="${_buffer}${output%x}"
}

flush() {
  echo -n "${_buffer}"
  _buffer=""
}

log() {
  if [[ -n "$_buffer_log" ]]; then
    _buffer_log="${_buffer_log}
$1"
  else
    _buffer_log="$1"
  fi
}

flush_log() {
  if [[ -n "${_buffer_log}" ]]; then
    buffer fail "${_buffer_log}"
    _buffer_log=""
  fi
}

finish_file() {
  if [[ "${class-JUNIT_FORMATTER_NO_FILE_ENCOUNTERED}" != JUNIT_FORMATTER_NO_FILE_ENCOUNTERED ]]; then
    file_header
    printf "%s\n" "${_buffer}"
    file_footer
  fi
}

finish_suite() {
  flush_log
  suite_header
  suite_flush
  finish_file # must come after suite flush to not print the last file before the others
  suite_footer
}

# shellcheck source=lib/bats-core/formatter.bash
source "$BATS_ROOT/lib/bats-core/formatter.bash"

bats_tap_stream_plan() { #  <number of tests>
  :
}

init_suite
trap finish_suite EXIT

bats_tap_stream_begin() { # <test index> <test name>
  flush_log
  # set after flushing to avoid overriding name of test
  name="$2"
}

bats_tap_stream_ok() { # [--duration <milliseconds] <test index> <test name>
  if [[ "$1" == "--duration" ]]; then
    test_exec_time="${BASH_REMATCH[1]}"
  else
    test_exec_time=0
  fi
  ((file_count += 1))
  file_exec_time="$((file_exec_time + test_exec_time))"
  suite_test_exec_time=$((suite_test_exec_time + test_exec_time))
  buffer pass
  # reset log for printouts from FD3 or we will see this again as failure (see #360)
  # we cannot move this into pass because it is run inside buffer in an extra shell
  _buffer_log=""
}

bats_tap_stream_skipped() { # <test index> <test name> <skip reason>
  ((file_count += 1))
  ((file_skipped += 1))
  test_exec_time=0
  buffer skip "$3"
}

bats_tap_stream_not_ok() { # [--duration <milliseconds>] <test index> <test name>
  ((file_count += 1))
  ((file_failures += 1))
  if [[ "$1" == "--duration" ]]; then
    test_exec_time="${BASH_REMATCH[1]}"
  else
    test_exec_time=0
  fi
  file_exec_time="$((file_exec_time + test_exec_time))"
  suite_test_exec_time=$((suite_test_exec_time + test_exec_time))
}

bats_tap_stream_comment() { # <comment text without leading '# '>
  log "$1"
}

bats_tap_stream_suite() { # <file name>
  flush_log
  suite_buffer finish_file
  init_file
  class="$(remove_prefix "$BASE_PATH" "$1")"
}

bats_tap_stream_unknown() { # <full line>
  :
}

bats_parse_internal_extended_tap
